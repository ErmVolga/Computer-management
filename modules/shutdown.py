from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram import Dispatcher, F
from bot.logger import logger
import subprocess

# üîå –õ–æ–≥–∏–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è
def execute_shutdown():
    try:
        subprocess.Popen("shutdown /s /t 0", shell=True)
        logger.info("‚èª –í—ã–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ –∑–∞–ø—É—â–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {e}")
        raise

# üí¨ –ö–æ–º–∞–Ω–¥–∞ /shutdown
async def shutdown_command(message: Message):

    try:
        execute_shutdown()
        await message.answer("‚èª –í—ã–∫–ª—é—á–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä...")
    except:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—ã–∫–ª—é—á–µ–Ω–∏–µ.")

# üîò Callback shutdown
async def shutdown_callback(callback: CallbackQuery):
    try:
        execute_shutdown()
        await callback.message.answer("‚èª –í—ã–∫–ª—é—á–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä...")
        await callback.answer("‚úÖ")
    except:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è")

# üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register(dp: Dispatcher):
    dp.message.register(shutdown_command, Command("shutdown"))
    dp.callback_query.register(shutdown_callback, F.data == "shutdown")