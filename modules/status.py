from aiogram import Dispatcher, F
from aiogram.types import CallbackQuery
from shared.system import is_allowed_user_id
from bot.logger import logger
import psutil
import time
import datetime


# üïí –ü–æ–ª—É—á–∏—Ç—å –∞–ø—Ç–∞–π–º
def get_uptime_str() -> str:
    boot_time = psutil.boot_time()
    now = time.time()
    delta = datetime.timedelta(seconds=int(now - boot_time))
    return str(delta)


# üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
def get_system_status() -> str:
    cpu = psutil.cpu_percent(interval=1)
    ram = psutil.virtual_memory().percent
    disk_used = psutil.disk_usage("/").percent

    # üì° –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –¥–∏—Å–∫ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ I/O –∑–∞ 1 —Å–µ–∫)
    io_before = psutil.disk_io_counters()
    time.sleep(1)
    io_after = psutil.disk_io_counters()

    read_speed = (io_after.read_bytes - io_before.read_bytes) / 1024 / 1024  # MB/s
    write_speed = (io_after.write_bytes - io_before.write_bytes) / 1024 / 1024  # MB/s

    uptime = datetime.timedelta(seconds=int(time.time() - psutil.boot_time()))

    return (
        f"<b>üìä –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
        f"üß† CPU –Ω–∞–≥—Ä—É–∑–∫–∞: <b>{cpu}%</b>\n"
        f"üíæ RAM –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{ram}%</b>\n"
        f"üóÇ –î–∏—Å–∫ –∑–∞–Ω—è—Ç: <b>{disk_used}%</b>\n"
        f"‚öôÔ∏è –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –¥–∏—Å–∫: <b>{read_speed:.1f} MB/s —á—Ç–µ–Ω–∏–µ</b>, <b>{write_speed:.1f} MB/s –∑–∞–ø–∏—Å—å</b>\n"
        f"‚è± –ê–ø—Ç–∞–π–º: <b>{uptime}</b>"
    )


# üîò Callback
async def status_callback(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    if is_allowed_user_id(user_id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    try:
        status_text = get_system_status()
        await callback.message.answer(status_text)
        await callback.answer("‚úÖ –ì–æ—Ç–æ–≤–æ")
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å")


# üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register(dp: Dispatcher):
    dp.callback_query.register(status_callback, F.data == "status")
