from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import Command
from aiogram import Dispatcher, F
from shared.system import take_screenshot_bytes, is_allowed_user_id
from bot.logger import logger


# üì∏ –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω–∞
async def send_screenshot(chat, user_id: str):
    try:
        image_bytes = take_screenshot_bytes()
        photo = BufferedInputFile(image_bytes, filename="screenshot.png")
        await chat.answer_photo(photo=photo)
        logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        await chat.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.")


# üí¨ –ö–æ–º–∞–Ω–¥–∞ /screenshot
async def screenshot_handler(message: Message):
    user_id = str(message.from_user.id)

    if is_allowed_user_id(user_id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await send_screenshot(message, user_id)


# üîò Callback screenshot
async def screenshot_callback(callback: CallbackQuery):
    user_id = str(callback.from_user.id)

    if is_allowed_user_id(user_id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await send_screenshot(callback.message, user_id)
    await callback.answer("‚úÖ –ì–æ—Ç–æ–≤–æ")


def register(dp: Dispatcher):
    dp.message.register(screenshot_handler, Command("screenshot"))
    dp.callback_query.register(screenshot_callback, F.data == "screenshot")
