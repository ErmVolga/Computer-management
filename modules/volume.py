from aiogram.types import Message, CallbackQuery, ForceReply
from aiogram.filters import Command
from aiogram import Dispatcher, F
from shared.system import is_allowed_user_id
from bot.logger import logger

from ctypes import POINTER, cast
from comtypes import CLSCTX_ALL
from pycaw.pycaw import AudioUtilities, IAudioEndpointVolume

import re

# üéõ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å
def set_volume(percent: int) -> bool:
    try:
        devices = AudioUtilities.GetSpeakers()
        interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
        volume = cast(interface, POINTER(IAudioEndpointVolume))
        volume.SetMasterVolumeLevelScalar(percent / 100.0, None)
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {e}")
        return False

# üí¨ –ö–æ–º–∞–Ω–¥–∞ /volume [—á–∏—Å–ª–æ]
async def volume_command_handler(message: Message):
    user_id = str(message.from_user.id)

    if is_allowed_user_id(user_id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    match = re.match(r"/volume\s+(\d+)", message.text)
    if not match:
        await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/volume 50</code> (0‚Äì100)")
        return

    percent = int(match.group(1))
    if percent < 0 or percent > 100:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.")
        return

    if set_volume(percent):
        await message.answer(f"üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {percent}%")
        logger.info(f"üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –Ω–∞ {percent}%")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å.")

# üîò –ö–Ω–æ–ø–∫–∞ "–ì—Ä–æ–º–∫–æ—Å—Ç—å" ‚Üí –∑–∞–ø—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏—è
async def volume_callback(callback: CallbackQuery):
    user_id = str(callback.from_user.id)

    if is_allowed_user_id(user_id):
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await callback.message.answer(
        "üîä –í–≤–µ–¥–∏—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å (0‚Äì100):",
        reply_markup=ForceReply(selective=True)
    )
    await callback.answer()

# üì© –û—Ç–≤–µ—Ç –Ω–∞ ForceReply
async def volume_reply_handler(message: Message):
    user_id = str(message.from_user.id)

    if is_allowed_user_id(user_id):
        return

    if not message.reply_to_message or "–≥—Ä–æ–º–∫–æ—Å—Ç—å" not in message.reply_to_message.text.lower():
        return

    text = message.text.strip()
    if not text.isdigit():
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.")
        return

    percent = int(text)
    if percent < 0 or percent > 100:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.")
        return

    if set_volume(percent):
        await message.answer(f"üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {percent}%")
        logger.info(f"üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ ForceReply: {percent}%")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å.")

# üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register(dp: Dispatcher):
    dp.message.register(volume_command_handler, Command("volume"))
    dp.callback_query.register(volume_callback, F.data == "volume")
    dp.message.register(volume_reply_handler)
