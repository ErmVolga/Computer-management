from aiogram.types import Message
from aiogram.filters import Command
from aiogram import Dispatcher
from shared.system import is_allowed_user_id
from bot.logger import logger

import threading
import pyttsx3


def speak_text(text: str):
    try:
        engine = pyttsx3.init()
        engine.say(text)
        engine.runAndWait()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")


async def say_handler(message: Message):
    user_id = str(message.from_user.id)

    if is_allowed_user_id(user_id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    text = message.text.removeprefix("/say").strip()

    if not text:
        await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/say –ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!</code>")
        return

    try:
        threading.Thread(target=speak_text, args=(text,), daemon=True).start()
        await message.answer("üó£Ô∏è –û–∑–≤—É—á–∏–≤–∞—é...")
        logger.info(f"üó£Ô∏è –¢–µ–∫—Å—Ç –æ–∑–≤—É—á–µ–Ω: {text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /say: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç.")


def register(dp: Dispatcher):
    dp.message.register(say_handler, Command("say"))
